/**
 * PDF Generator API 3.1.1Lib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ForbiddenError } from '../errors/forbiddenError';
import { InternalServerError } from '../errors/internalServerError';
import { NotFoundError } from '../errors/notFoundError';
import { UnauthorizedError } from '../errors/unauthorizedError';
import { UnprocessableEntityError } from '../errors/unprocessableEntityError';
import {
  TheRequestWasSuccessfullyExecuted,
  theRequestWasSuccessfullyExecutedSchema,
} from '../models/theRequestWasSuccessfullyExecuted';
import {
  WorkspaceInformation,
  workspaceInformationSchema,
} from '../models/workspaceInformation';
import { string } from '../schema';
import { BaseController } from './baseController';

export class WorkspacesWorkspaceIdController extends BaseController {
  /**
   * Returns workspace information
   *
   * @param workspaceId (Required) Workspace identifier
   * @return Response from the API call
   */
  async getWorkspace(
    workspaceId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WorkspaceInformation>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ workspaceId: [workspaceId, string()] });
    req.appendTemplatePath`/workspaces/${mapped.workspaceId}`;
    req.throwOn(401, UnauthorizedError, 'Unauthorized');
    req.throwOn(403, ForbiddenError, 'Forbidden');
    req.throwOn(404, NotFoundError, 'Not Found');
    req.throwOn(422, UnprocessableEntityError, 'Unprocessable Entity (WebDAV) (RFC 4918)');
    req.throwOn(500, InternalServerError, 'Internal Server Error');
    return req.callAsJson(workspaceInformationSchema, requestOptions);
  }

  /**
   * Deletes the workspace
   *
   * @param workspaceId (Required) Workspace identifier
   * @return Response from the API call
   */
  async deleteWorkspace(
    workspaceId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TheRequestWasSuccessfullyExecuted>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({ workspaceId: [workspaceId, string()] });
    req.appendTemplatePath`/workspaces/${mapped.workspaceId}`;
    req.throwOn(401, UnauthorizedError, 'Unauthorized');
    req.throwOn(403, ForbiddenError, 'Forbidden');
    req.throwOn(404, NotFoundError, 'Not Found');
    req.throwOn(422, UnprocessableEntityError, 'Unprocessable Entity (WebDAV) (RFC 4918)');
    req.throwOn(500, InternalServerError, 'Internal Server Error');
    return req.callAsJson(
      theRequestWasSuccessfullyExecutedSchema,
      requestOptions
    );
  }
}
